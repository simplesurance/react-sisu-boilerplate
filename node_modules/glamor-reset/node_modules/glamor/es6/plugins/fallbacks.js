var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import * as hyphenateStyleName from 'fbjs/lib/hyphenateStyleName';
import * as memoizeStringOnly from 'fbjs/lib/memoizeStringOnly';
var processStyleName = memoizeStringOnly(hyphenateStyleName);
export function fallbacks(node) {
    var hasArray = Object.keys(node.style).map(function (x) { return Array.isArray(node.style[x]); }).indexOf(true) >= 0;
    if (hasArray) {
        var style_1 = node.style;
        var flattened = Object.keys(style_1).reduce(function (o, key) {
            return (__assign({}, o, (_a = {}, _a[key] = Array.isArray(style_1[key]) ? style_1[key].join("; " + processStyleName(key) + ": ") : style_1[key], _a)));
            var _a;
        }, {});
        return __assign({}, node, { style: flattened });
    }
    return node;
}
//# sourceMappingURL=fallbacks.js.map